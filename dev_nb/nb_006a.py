
        #################################################
        ### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
        #################################################
        # file to edit: /data1/jhoward/git/fastai_v1/dev_nb/006a_coords.ipynb

class ImagePoints():
    def __init__(self, pts, shape):
        self._flow=pts
        self._affine_mat=None
        self.sample_kwargs = {}
        self._shape = shape

    @property
    def shape(self): return self._shape

    def __repr__(self): return f'{self.__class__.__name__} ({self.shape})'

    @property
    def px(self):
        return self.flow
    @px.setter
    def px(self,v): self._px=v

    @property
    def flow(self):
        if self._flow is None:
            self._flow = affine_grid(self.shape)
        if self._affine_mat is not None:
            self._flow = affine_inv_mult(self._flow,self._affine_mat,self._shape)
            self._flow = apply_pad_coords(self._flow, **self.sample_kwargs)
            self._affine_mat = None

        return self._flow
    @flow.setter
    def flow(self,v): self._flow=v

    def lighting(self, func, *args, **kwargs):
        return self

    #TODO: special func for points
    def pixel(self, func, *args, **kwargs):
        self.px = func(self.px, *args, **kwargs)
        return self

    def coord(self, func, *args, **kwargs):
        self.flow = func(self.flow, self.shape, *args, invert=True, **kwargs)
        return self

    def affine(self, func, *args, **kwargs):
        m = func(*args, **kwargs)
        self.affine_mat = self.affine_mat @ self._flow.new(m)
        return self

    def set_sample(self, **kwargs):
        self.sample_kwargs = kwargs
        return self

    def resize(self, size):
        assert self._flow is None
        if isinstance(size, int): size=(self.shape[0], size, size)
        self.flow = affine_grid(size)
        return self

    @property
    def affine_mat(self):
        if self._affine_mat is None: self._affine_mat = self._flow.new(torch.eye(3))
        return self._affine_mat
    @affine_mat.setter
    def affine_mat(self,v): self._affine_mat=v

    def clone(self): return self.__class__(self.flow.clone(), self.shape)